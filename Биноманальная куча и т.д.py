#–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–π_–±–∏–Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π –∫—É—á–∏ –Ω–∞ Pyhton
class BinomialNode:
    def __init__(self, value):
        self.value = value      # –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞
        self.degree = 0         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (—Å—Ç–µ–ø–µ–Ω—å –¥–µ—Ä–µ–≤–∞)
        self.children = []      # –°–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤

class BinomialHeap:
    def __init__(self):
        self.trees = []         # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –∫—É—á–∏
    
    def add_tree(self, value):
        new_node = BinomialNode(value)
        self.trees.append(new_node)
        print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ä–µ–≤–æ —Å –∫–æ—Ä–Ω–µ–º: {value}")
    
    def show_heap(self):
        if not self.trees:
            print("–ö—É—á–∞ –ø—É—Å—Ç–∞!")
            return
        
        print("\nüìö –°–¢–†–£–ö–¢–£–†–ê –ë–ò–ù–û–ú–ò–ê–õ–¨–ù–û–ô –ö–£–ß–ò:")
        for i, tree in enumerate(self.trees):
            print(f"–î–µ—Ä–µ–≤–æ {i+1}: –∫–æ—Ä–µ–Ω—å = {tree.value}, —Å—Ç–µ–ø–µ–Ω—å = {tree.degree}")
            self._show_children(tree, 1)

    def _show_children(self, node, level):
        for child in node.children:
            indent = "    " * level
            print(f"{indent}‚Ü≥ –†–µ–±–µ–Ω–æ–∫: {child.value}, —Å—Ç–µ–ø–µ–Ω—å = {child.degree}")
            self._show_children(child, level + 1)
#–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—á–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –Ω–∞ Python
class FibonacciNode:
    def __init__(self, key):
        self.key = key
        self.degree = 0
        self.marked = False
        self.parent = self.child = None
        self.left = self.right = self

class FibonacciHeap:
    def __init__(self):
        self.min_node = None
        self.num_nodes = 0
#–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã –Ω–∞ Python
class HashTable:
    def __init__(self, capacity=16):
        self.capacity = capacity
        self.size = 0
        self.buckets = [[] for _ in range(capacity)]
    
    def _hash(self, key):
        return hash(key) % self.capacity